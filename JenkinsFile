#!/usr/bin/groovy

node {
    def root = pwd()
    def mvn = tool 'M3'
    def golangTool = tool 'golang_1.7'
    def zapHome = tool 'ZAProxy_v2_5_0'
    def nodejs = tool 'NodeJS_6'
    stage("Setup") {
        deleteDir()
        if(env.GITLAB_CREDS) {
            git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
        } else {
            git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
        }
        withEnv([
          "PATH+=${golangTool}/bin:${root}/gopath/bin",
          "GOROOT=${golangTool}",
          "GOPATH=${root}/gopath"
        ]) {
            sh """
              mkdir -p ${root}/gopath/bin ${root}/gopath/pkg ${root}/gopath/src
              go version
            """
        }
        if(!params.SKIP_INTEGRATION_TESTS) {
            if(!fileExists("integration-tests")) {
                sh "mkdir -p integration-tests"
            }
            withCredentials([
              file(credentialsId: "${POSTMAN_SECRET_FILE}", variable: "POSTMAN_FILE")
            ]) {
                withEnv([
                  "PATH+=${nodejs}/bin",
                  "NPM_CONFIG_CACHE=${root}/.npmcache",
                  "HOME=${WORKSPACE}"
                ]) {
                    dir ("integration-tests") {
                        if(env.GITLAB_CREDS) {
                            git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
                        } else {
                            git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}"
                        }
                        sh """
                          mkdir -p ${root}/.npmcache
                          npm install newman@2
                        """
                    }
                }
            }
        }
    }
    def appvers = sh(script: """git describe --long --tags --always | sed 's/\\./-/'g""", returnStdout: true)
    appvers = appvers.trim()
    def appName = "pz-gocommon-${appvers}"
    stage("Security Scan Pass/Fail") {
        // Query threadfix and block if any highs/crits are found
        /*sh "mkdir -p sspf-pkg"
        dir("./sspf-pkg") {
            withCredentials([[$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: 'THREADFIX_KEY']]) {
                sh "curl -L ${env.SSPF_PACKAGE} -o sspf.zip"
                sh "unzip sspf.zip"
                dir("./sspf-master/sspf") {
                    sh "/bin/curl --fail --silent ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}?apiKey=${THREADFIX_KEY} | ./sspf.py"
                }
            }
        }*/
    }
    stage("Archive") {
        def archiveName = "pz-gocommon.tgz"
        withEnv([
          "PATH+=${golangTool}/bin:${root}/gopath/bin",
          "GOROOT=${golangTool}",
          "GOPATH=${root}/gopath"
        ]) {
            sh """
              mkdir -p ${GOPATH}/src/github.com/venicegeo/pz-gocommon
              find . -maxdepth 2 -mindepth 1 -not -name gopath -exec cp -R '{}' gopath/src/github.com/venicegeo/pz-gocommon/ \\;
              cd "\$GOPATH/src/github.com/venicegeo/pz-gocommon"
              go install
              cd gocommon 
              go test -v -coverprofile=${root}/gocommon.cov
              cd ..
              cd ${root}
              go tool cover -func=gocommon.cov -o gocommon.cov.txt
              cp \$GOPATH/bin/pz-gocommon ${root}/pz-gocommon
              tar -cvzf ${archiveName} pz-gocommon *.cov *.cov.txt glide.lock glide.yaml
            """
            def getDependencyStatus = sh(script: """mvn --quiet --settings ~/.m2/settings.xml dependency:get -Dmaven.repo.local="${root}/.m2/repository" -DrepositoryId=nexus -DartifactId=pz-gocommon -Dversion=${appvers} -DgroupId="org.venice.piazza" -Dpackaging=tgz -DremoteRepositories="nexus::default::${env.ARTIFACT_STORAGE_DEPLOY_URL}" >> /dev/null 2>&1""", returnStatus: true)
            if(getDependencyStatus == 0) {
                echo "Artifact version ${appvers} exists in Nexus, nothing to do"
            } else {
                sh """
                  mvn -X --settings ~/.m2/settings.xml deploy:deploy-file -Dfile=${archiveName} -DrepositoryId=nexus	-Durl="${env.ARTIFACT_STORAGE_DEPLOY_URL}" -DgroupId="org.venice.piazza" -DgeneratePom=false -Dpackaging=tgz -Dmaven.repo.local="${root}/.m2/repository" -DartifactId=pz-gocommon -Dversion=${appvers}
                """
            }
        }
    }
    stage("Phase One Deploy") {
        if(!fileExists('.cf')) {
            sh "mkdir -p .cf"
        }
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
            ]) {
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}
                  cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -d ${env.PHASE_ONE_PCF_DOMAIN} --no-start
                  cf set-env ${appName} SPACE ${env.PHASE_ONE_PCF_SPACE}
                  cf set-env ${appName} DOMAIN ${env.PHASE_ONE_PCF_DOMAIN}
                  cf restage ${appName}
                """
                try {
                  sh "cf start ${appName}"
                } catch (Exception e) {
                  //sh "cf logs --recent ${appName}"
                  sh "cf delete ${appName} -f"
                  error("Error during application start. Deleting ${appName} and failing the build.")
                }
            }
        }
        withCredentials([
          [$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
        ]) {
            sh """
              mkdir -p ${root}/zap-out
              ${zapHome}/zap.sh -cmd -quickout ${root}/zap-out/zap.xml -quickurl https://${appName}.${env.PHASE_ONE_PCF_DOMAIN}
              cat ${root}/zap-out/zap.xml
              /bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@${root}/zap-out/zap.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}
            """
        }
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
            ]) {
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}
                """
                def legacyAppNames = sh(script: """cf routes | grep \"pz-gocommon \" | awk '{print \$4}'""", returnStdout: true)
                sh "cf map-route ${appName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname pz-gocommon"
                // Remove legacy applications
                for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
                    def legacyAppName = legacyApp.toString().trim()
                    if(legacyAppName != appName) {
                        sh "cf unmap-route ${legacyAppName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname ${legacyAppName}"
                        sh "cf delete -f ${legacyAppName}"
                    }
                }
            }
        }
    }
    if(!params.SKIP_INTEGRATION_TESTS) {
        stage("Phase One Integration Tests") {
            withCredentials([
              file(credentialsId: "${POSTMAN_SECRET_FILE}", variable: "POSTMAN_FILE")
            ]) {
                withEnv([
                  "PATH+=${root}/integration-tests/node_modules/newman/bin:${nodejs}/bin",
                  "PCF_SPACE=${env.PHASE_ONE_PCF_SPACE}",
                  "HOME=${WORKSPACE}"
                ]) {
                    dir ("integration-tests") {
                        sh "sh ci/blackbox.sh"
                    }
                }
            }
        }
    }
    if(params.DEPLOY_PHASE_TWO) {
        stage("Phase Two Deploy") {
            if(!fileExists('.cf')) {
                sh "mkdir -p .cf"
            }
            withEnv([
              "CF_HOME=.cf"
            ]) {
                withCredentials([
                  [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
                ]) {
                    sh """
                      cf api ${env.PCF_API_ENDPOINT}
                      cf auth ${CFUSER} ${CFPASS}
                      cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}
                      cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -d ${env.PHASE_TWO_PCF_DOMAIN} --no-start
                      cf set-env ${appName} SPACE ${env.PHASE_TWO_PCF_SPACE}
                      cf set-env ${appName} DOMAIN ${env.PHASE_TWO_PCF_DOMAIN}
                      cf restage ${appName}
                    """
                    try {
                      sh "cf start ${appName}"
                    } catch (Exception e) {
                      //sh "cf logs --recent ${appName}"
                      sh "cf delete ${appName} -f"
                      error("Error during application start. Deleting ${appName} and failing the build.")
                    }
                }
            }
            withCredentials([
              [$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
            ]) {
                sh """
                  mkdir -p ${root}/zap-out
                  ${zapHome}/zap.sh -cmd -quickout ${root}/zap-out/zap.xml -quickurl https://${appName}.${env.PHASE_TWO_PCF_DOMAIN}
                  cat ${root}/zap-out/zap.xml
                  /bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@${root}/zap-out/zap.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}
                """
            }
            withEnv([
              "CF_HOME=.cf"
            ]) {
                withCredentials([
                  [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
                ]) {
                    sh """
                      cf api ${env.PCF_API_ENDPOINT}
                      cf auth ${CFUSER} ${CFPASS}
                      cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}
                    """
                    def legacyAppNames = sh(script: """cf routes | grep \"pz-gocommon \" | awk '{print \$4}'""", returnStdout: true)
                    sh "cf map-route ${appName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname pz-gocommon"
                    // Remove legacy applications
                    for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
                        def legacyAppName = legacyApp.toString().trim()
                        if(legacyAppName != appName) {
                            sh "cf unmap-route ${legacyAppName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname ${legacyAppName}"
                            sh "cf delete -f ${legacyAppName}"
                        }
                    }
                }
            }
        }
        if(!params.SKIP_INTEGRATION_TESTS) {
            stage("Phase Two Integration Tests") {
                withCredentials([
                  file(credentialsId: "${POSTMAN_SECRET_FILE}", variable: "POSTMAN_FILE")
                ]) {
                    withEnv([
                      "PATH+=${root}/integration-tests/node_modules/newman/bin:${nodejs}/bin",
                      "PCF_SPACE=${env.PHASE_TWO_PCF_SPACE}",
                      "HOME=${WORKSPACE}"
                    ]) {
                        dir ("integration-tests") {
                            sh "sh ci/blackbox.sh"
                        }
                    }
                }
            }
        }
    }
}
